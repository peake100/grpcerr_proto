syntax = "proto3";
package pkerr;
option go_package = "github.com/peake100/gRPEAKEC-go/pkerr/protogen";

import "cereal_proto/uuid.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

// Trace info holds information about where an error occurred.
message TraceInfo {
  // app name is the name of the service or process that generated the error.
  string app_name = 1;

  // Identifier for the host the app is running on.
  string app_host = 2;

  // stack_trace of the error (can be ""). No enforced format. This is meant for human
  // reference).
  string stack_trace = 3;

  // Some languages let an error continue to gather context, with wrapping errors in go.
  // This field can be used to store additional context added to the error after it
  // was created.
  string additional_context = 4;
}

// Error holds information about an error.
message Error {
  // id is a uuid that uniquely identifies this error.
  cereal.UUID id = 1;

  // issuer is the issuer of a code. If multiple services use this library, they
  // can differentiate their error codes by having unique issuers. If a number of
  // services working together in the same backend coordinate to ensure their error
  // definitions do not overlap, they can share an Issuer value.
  string issuer = 2;

  // code is the API Error code.
  uint32 code = 3;

  // grpc_code is the grpc status code associated with this error.
  int32 grpc_code = 4;

  // name is the human-readable API Error name tied to code.
  string name = 5;

  // message is the error message.
  string message  = 6;

  // time is the time that the error occurred
  google.protobuf.Timestamp time = 7;

  // details are arbitrary information about the error.
  repeated google.protobuf.Any details = 8;

  // Trace holds a stack of TraceInfo objects. Each time an app encounters an error,
  // it can add it's TraceInfo object to the end of the trace.
  repeated TraceInfo trace = 9;
}
